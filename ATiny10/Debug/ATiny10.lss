
ATiny10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000012  00004248  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800040  00800040  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000007  00800040  00800040  000002ee  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000070  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000856  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005ec  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000026f  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000108  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003fa  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000254  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0b c0       	rjmp	.+22     	; 0x18 <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	ee c0       	rjmp	.+476    	; 0x1e8 <__vector_5>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	1f c0       	rjmp	.+62     	; 0x50 <__bad_interrupt>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>

00000016 <__ctors_start>:
  16:	15 01       	movw	r2, r10

00000018 <__ctors_end>:
  18:	11 27       	eor	r17, r17
  1a:	1f bf       	out	0x3f, r17	; 63
  1c:	cf e5       	ldi	r28, 0x5F	; 95
  1e:	d0 e0       	ldi	r29, 0x00	; 0
  20:	de bf       	out	0x3e, r29	; 62
  22:	cd bf       	out	0x3d, r28	; 61

00000024 <__do_clear_bss>:
  24:	20 e0       	ldi	r18, 0x00	; 0
  26:	a0 e4       	ldi	r26, 0x40	; 64
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	01 c0       	rjmp	.+2      	; 0x2e <.do_clear_bss_start>

0000002c <.do_clear_bss_loop>:
  2c:	1d 93       	st	X+, r17

0000002e <.do_clear_bss_start>:
  2e:	a7 34       	cpi	r26, 0x47	; 71
  30:	b2 07       	cpc	r27, r18
  32:	e1 f7       	brne	.-8      	; 0x2c <.do_clear_bss_loop>

00000034 <__do_global_ctors>:
  34:	20 e0       	ldi	r18, 0x00	; 0
  36:	cc e0       	ldi	r28, 0x0C	; 12
  38:	d0 e0       	ldi	r29, 0x00	; 0
  3a:	05 c0       	rjmp	.+10     	; 0x46 <__SREG__+0x7>
  3c:	c1 50       	subi	r28, 0x01	; 1
  3e:	d0 40       	sbci	r29, 0x00	; 0
  40:	fd 2f       	mov	r31, r29
  42:	ec 2f       	mov	r30, r28
  44:	f7 d0       	rcall	.+494    	; 0x234 <__tablejump2__>
  46:	cb 30       	cpi	r28, 0x0B	; 11
  48:	d2 07       	cpc	r29, r18
  4a:	c1 f7       	brne	.-16     	; 0x3c <__CCP__>
  4c:	bc d0       	rcall	.+376    	; 0x1c6 <main>
  4e:	fa c0       	rjmp	.+500    	; 0x244 <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <_ZN5LightC1Eh>:
ï»¿#include "Lights.h"

Light::Light(myByte ledPort) : _ledPort(ledPort), _countOfMillis(0)
  52:	e8 2f       	mov	r30, r24
  54:	f9 2f       	mov	r31, r25
  56:	60 83       	st	Z, r22
  58:	ee 5f       	subi	r30, 0xFE	; 254
  5a:	ff 4f       	sbci	r31, 0xFF	; 255
  5c:	10 83       	st	Z, r17
  5e:	12 93       	st	-Z, r17
  60:	08 95       	ret

00000062 <_ZN5Light7setPortEh>:

void Light::setPort(myByte value)
{
	//set 1 | (1 << _port)
	//set 0 & ~(1 << _port)
	if (value == 0)
  62:	61 13       	cpse	r22, r17
  64:	0f c0       	rjmp	.+30     	; 0x84 <_ZN5Light7setPortEh+0x22>
		PORTB &= ~(1 << _ledPort);
  66:	62 b1       	in	r22, 0x02	; 2
  68:	41 e0       	ldi	r20, 0x01	; 1
  6a:	50 e0       	ldi	r21, 0x00	; 0
  6c:	e8 2f       	mov	r30, r24
  6e:	f9 2f       	mov	r31, r25
  70:	00 81       	ld	r16, Z
  72:	02 c0       	rjmp	.+4      	; 0x78 <_ZN5Light7setPortEh+0x16>
  74:	44 0f       	add	r20, r20
  76:	55 1f       	adc	r21, r21
  78:	0a 95       	dec	r16
  7a:	e2 f7       	brpl	.-8      	; 0x74 <_ZN5Light7setPortEh+0x12>
  7c:	40 95       	com	r20
  7e:	46 23       	and	r20, r22
  80:	42 b9       	out	0x02, r20	; 2
  82:	08 95       	ret
	else
		PORTB |= (1 << _ledPort);
  84:	62 b1       	in	r22, 0x02	; 2
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	e8 2f       	mov	r30, r24
  8c:	f9 2f       	mov	r31, r25
  8e:	00 81       	ld	r16, Z
  90:	02 c0       	rjmp	.+4      	; 0x96 <_ZN5Light7setPortEh+0x34>
  92:	44 0f       	add	r20, r20
  94:	55 1f       	adc	r21, r21
  96:	0a 95       	dec	r16
  98:	e2 f7       	brpl	.-8      	; 0x92 <_ZN5Light7setPortEh+0x30>
  9a:	46 2b       	or	r20, r22
  9c:	42 b9       	out	0x02, r20	; 2
  9e:	08 95       	ret

000000a0 <_ZN5Light5setupEhhhPKi>:

Light::Light(myByte ledPort) : _ledPort(ledPort), _countOfMillis(0)
{}

void Light::setup(const myByte startValue, const myByte startIntervall, const myByte lengthOfIntervall, const int * intervall)
{
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	28 2f       	mov	r18, r24
  ae:	39 2f       	mov	r19, r25
	DDRB |= (1 << _ledPort);
  b0:	51 b1       	in	r21, 0x01	; 1
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	e2 2f       	mov	r30, r18
  b8:	f3 2f       	mov	r31, r19
  ba:	00 81       	ld	r16, Z
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <_ZN5Light5setupEhhhPKi+0x22>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 95       	dec	r16
  c4:	e2 f7       	brpl	.-8      	; 0xbe <_ZN5Light5setupEhhhPKi+0x1e>
  c6:	85 2b       	or	r24, r21
  c8:	81 b9       	out	0x01, r24	; 1
	
	if (startIntervall >= _lengthOfIntervall)
  ca:	ec 5f       	subi	r30, 0xFC	; 252
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	50 81       	ld	r21, Z
  d0:	e4 50       	subi	r30, 0x04	; 4
  d2:	f0 40       	sbci	r31, 0x00	; 0
  d4:	45 17       	cp	r20, r21
  d6:	28 f0       	brcs	.+10     	; 0xe2 <_ZN5Light5setupEhhhPKi+0x42>
		_pointerIntervall = _lengthOfIntervall -1;
  d8:	51 50       	subi	r21, 0x01	; 1
  da:	ed 5f       	subi	r30, 0xFD	; 253
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	50 83       	st	Z, r21
  e0:	05 c0       	rjmp	.+10     	; 0xec <_ZN5Light5setupEhhhPKi+0x4c>
	else
		_pointerIntervall = startIntervall;
  e2:	e2 2f       	mov	r30, r18
  e4:	f3 2f       	mov	r31, r19
  e6:	ed 5f       	subi	r30, 0xFD	; 253
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	40 83       	st	Z, r20
		
	setPort(startValue);
  ec:	82 2f       	mov	r24, r18
  ee:	93 2f       	mov	r25, r19
  f0:	b8 df       	rcall	.-144    	; 0x62 <_ZN5Light7setPortEh>
	_intervall = intervall;
  f2:	c8 5f       	subi	r28, 0xF8	; 248
  f4:	df 4f       	sbci	r29, 0xFF	; 255
  f6:	49 91       	ld	r20, Y+
  f8:	58 81       	ld	r21, Y
  fa:	e2 2f       	mov	r30, r18
  fc:	f3 2f       	mov	r31, r19
  fe:	ea 5f       	subi	r30, 0xFA	; 250
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	50 83       	st	Z, r21
 104:	42 93       	st	-Z, r20
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	08 95       	ret

00000110 <_ZN5Light4tickEv>:
		PORTB |= (1 << _ledPort);
}

void Light::tick(void)
{
	++_countOfMillis;
 110:	e8 2f       	mov	r30, r24
 112:	f9 2f       	mov	r31, r25
 114:	ef 5f       	subi	r30, 0xFF	; 255
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	41 91       	ld	r20, Z+
 11a:	50 81       	ld	r21, Z
 11c:	e2 50       	subi	r30, 0x02	; 2
 11e:	f0 40       	sbci	r31, 0x00	; 0
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
 124:	ee 5f       	subi	r30, 0xFE	; 254
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	50 83       	st	Z, r21
 12a:	42 93       	st	-Z, r20
 12c:	e1 50       	subi	r30, 0x01	; 1
 12e:	f0 40       	sbci	r31, 0x00	; 0
	if (_countOfMillis >= _intervall[_pointerIntervall])
 130:	ed 5f       	subi	r30, 0xFD	; 253
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	60 81       	ld	r22, Z
 136:	e3 50       	subi	r30, 0x03	; 3
 138:	f0 40       	sbci	r31, 0x00	; 0
 13a:	eb 5f       	subi	r30, 0xFB	; 251
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	a0 81       	ld	r26, Z
 140:	e5 50       	subi	r30, 0x05	; 5
 142:	f0 40       	sbci	r31, 0x00	; 0
 144:	ea 5f       	subi	r30, 0xFA	; 250
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	70 81       	ld	r23, Z
 14a:	ea 2f       	mov	r30, r26
 14c:	f7 2f       	mov	r31, r23
 14e:	e6 0f       	add	r30, r22
 150:	f1 1f       	adc	r31, r17
 152:	e6 0f       	add	r30, r22
 154:	f1 1f       	adc	r31, r17
 156:	61 91       	ld	r22, Z+
 158:	70 81       	ld	r23, Z
 15a:	46 17       	cp	r20, r22
 15c:	57 07       	cpc	r21, r23
 15e:	44 f1       	brlt	.+80     	; 0x1b0 <_ZN5Light4tickEv+0xa0>
	{
		_countOfMillis = 0;
 160:	e8 2f       	mov	r30, r24
 162:	f9 2f       	mov	r31, r25
 164:	ee 5f       	subi	r30, 0xFE	; 254
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	10 83       	st	Z, r17
 16a:	12 93       	st	-Z, r17
 16c:	e1 50       	subi	r30, 0x01	; 1
 16e:	f0 40       	sbci	r31, 0x00	; 0
		PORTB ^= (1 << _ledPort);
 170:	62 b1       	in	r22, 0x02	; 2
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	00 81       	ld	r16, Z
 178:	02 c0       	rjmp	.+4      	; 0x17e <_ZN5Light4tickEv+0x6e>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	0a 95       	dec	r16
 180:	e2 f7       	brpl	.-8      	; 0x17a <_ZN5Light4tickEv+0x6a>
 182:	46 27       	eor	r20, r22
 184:	42 b9       	out	0x02, r20	; 2
		++_pointerIntervall;
 186:	ed 5f       	subi	r30, 0xFD	; 253
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	40 81       	ld	r20, Z
 18c:	e3 50       	subi	r30, 0x03	; 3
 18e:	f0 40       	sbci	r31, 0x00	; 0
 190:	4f 5f       	subi	r20, 0xFF	; 255
 192:	ed 5f       	subi	r30, 0xFD	; 253
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	40 83       	st	Z, r20
 198:	e3 50       	subi	r30, 0x03	; 3
 19a:	f0 40       	sbci	r31, 0x00	; 0
		if (_pointerIntervall >= _lengthOfIntervall)
 19c:	ec 5f       	subi	r30, 0xFC	; 252
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	50 81       	ld	r21, Z
 1a2:	e4 50       	subi	r30, 0x04	; 4
 1a4:	f0 40       	sbci	r31, 0x00	; 0
 1a6:	45 17       	cp	r20, r21
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <_ZN5Light4tickEv+0xa0>
			_pointerIntervall = 0;
 1aa:	ed 5f       	subi	r30, 0xFD	; 253
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	10 83       	st	Z, r17
 1b0:	08 95       	ret

000001b2 <_Z11init_timer0v>:
}

void init_timer0()
{
	// Set Timer0 to CTC mode
	TCCR0A = (1 << WGM01);  // WGM01:0 = 2 -> CTC mode
 1b2:	42 e0       	ldi	r20, 0x02	; 2
 1b4:	4e bd       	out	0x2e, r20	; 46

	// Set the compare match value for 1 ms
	OCR0A = COMPARE_MATCH_VALUE;
 1b6:	6c e7       	ldi	r22, 0x7C	; 124
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	77 bd       	out	0x27, r23	; 39
 1bc:	66 bd       	out	0x26, r22	; 38

	// Set the prescaler to 64
	TCCR0B = (1 << CS01) | (1 << CS00);  // CS01:0 = 3 -> Prescaler 64
 1be:	53 e0       	ldi	r21, 0x03	; 3
 1c0:	5d bd       	out	0x2d, r21	; 45

	// Enable Timer0 compare match interrupt
	TIMSK0 = (1 << OCIE0A);  // Enable compare match A interrupt
 1c2:	4b bd       	out	0x2b, r20	; 43
 1c4:	08 95       	ret

000001c6 <main>:
//const int intervallB[] = {500, 500};
//const int intervallC[] = {250, 250};	
			
int main(void)
{
	L0.setup(0, 0, sizeof(intervallA) / sizeof(intervallA[0]), intervallA);
 1c6:	48 e4       	ldi	r20, 0x48	; 72
 1c8:	52 e4       	ldi	r21, 0x42	; 66
 1ca:	5f 93       	push	r21
 1cc:	4f 93       	push	r20
 1ce:	49 e0       	ldi	r20, 0x09	; 9
 1d0:	4f 93       	push	r20
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	62 df       	rcall	.-316    	; 0xa0 <_ZN5Light5setupEhhhPKi>
	
	//DDRB |= (1 << 0) | (1 << 1) | (1 << 2);
	//PORTB = 0b00000111;
	
	// Initialize the timer
	init_timer0();
 1dc:	ea df       	rcall	.-44     	; 0x1b2 <_Z11init_timer0v>

	// Enable global interrupts
	sei();
 1de:	78 94       	sei
 1e0:	0f 91       	pop	r16
 1e2:	0f 91       	pop	r16
 1e4:	0f 91       	pop	r16
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x20>

000001e8 <__vector_5>:
	// Enable Timer0 compare match interrupt
	TIMSK0 = (1 << OCIE0A);  // Enable compare match A interrupt
}

ISR(TIM0_COMPA_vect)
{
 1e8:	1f 93       	push	r17
 1ea:	0f 93       	push	r16
 1ec:	0f b7       	in	r16, 0x3f	; 63
 1ee:	0f 93       	push	r16
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	// Interrupt Service Routine (ISR) for Timer0 Compare Match A
	// This code will be executed every 1 ms
	// Add your code here
	L0.tick();
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	82 df       	rcall	.-252    	; 0x110 <_ZN5Light4tickEv>
	//L1.tick();
	//L2.tick();
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	0f 91       	pop	r16
 222:	0f bf       	out	0x3f, r16	; 63
 224:	0f 91       	pop	r16
 226:	1f 91       	pop	r17
 228:	18 95       	reti

0000022a <_GLOBAL__sub_I_L0>:
#define COMPARE_MATCH_VALUE (F_CPU / PRESCALER / 1000) - 1  // 1 ms interval

ISR(TIM0_COMPA_vect);
void init_timer0();

Light L0(0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	80 e4       	ldi	r24, 0x40	; 64
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	10 df       	rcall	.-480    	; 0x52 <_ZN5LightC1Eh>
 232:	08 95       	ret

00000234 <__tablejump2__>:
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	e0 50       	subi	r30, 0x00	; 0
 23a:	f0 4c       	sbci	r31, 0xC0	; 192
 23c:	01 91       	ld	r16, Z+
 23e:	f0 81       	ld	r31, Z
 240:	e0 2f       	mov	r30, r16
 242:	09 94       	ijmp

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
